{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dinar\\\\Desktop\\\\25_MyFrontendProject-master\\\\src\\\\components\\\\ShopSidebar\\\\left_components\\\\wid_brands.jsx\";\nimport React from 'react';\nimport Spinner from '../../spinner';\nimport { connect } from 'react-redux';\nimport * as PropTypes from 'prop-types';\nimport { uploadDataToStore, loadNumerator } from '../../../store/action_creatores';\n\nfunction WidBrands(props) {\n  function brandHandler(e) {\n    // обновляем каталог товаров на основании фильтров по брендам\n    props.paginatorEngine(\"0\"); // сбрасываем страницу на первую при изменении фильтра цветов\n\n    if (e.target.getAttribute(\"ident\") === \"ALL\") {\n      props.uploadDataToStore(\"catalog\");\n    } else {\n      props.uploadDataToStore(\"catalog\", `?brand=${e.target.getAttribute(\"ident\")}`);\n    }\n\n    ;\n  }\n\n  ;\n\n  function brandsCheckboxGenerator() {\n    // генерируем чекбоксы на основе информации о брендах с сервера\n    if (props.brandsLoading) {\n      return /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }\n      });\n    }\n\n    ;\n    return props.brands.map(item => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-check\",\n        key: item.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        onChange: brandHandler,\n        className: \"form-check-input\",\n        type: \"radio\",\n        name: \"brandFilter\",\n        ident: item.id,\n        id: item.title,\n        defaultChecked: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        className: \"form-check-label\",\n        htmlFor: item.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }\n      }, item.title));\n    });\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"widget brands mb-50\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    className: \"widget-title mb-30\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Brands\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"widget-desc\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-check\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: brandHandler,\n    className: \"form-check-input\",\n    type: \"radio\",\n    name: \"brandFilter\",\n    ident: \"ALL\",\n    id: \"ALL\",\n    defaultChecked: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"form-check-label\",\n    htmlFor: \"ALL\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, \"ALL\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  })), brandsCheckboxGenerator()));\n}\n\n;\n\nconst mapStateToProps = store => {\n  return {\n    brands: store.app.brands.data,\n    brandsLoading: store.app.isLoading.brands || false\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    uploadDataToStore: (actions, key) => dispatch(uploadDataToStore(actions, key)),\n    loadNumerator: string => dispatch(loadNumerator(string))\n  };\n};\n\nWidBrands.propTypes = {\n  brands: PropTypes.array,\n  brandsLoading: PropTypes.bool,\n  uploadDataToStore: PropTypes.func\n};\nexport default React.memo(connect(mapStateToProps, mapDispatchToProps)(WidBrands));","map":{"version":3,"sources":["C:/Users/Dinar/Desktop/25_MyFrontendProject-master/src/components/ShopSidebar/left_components/wid_brands.jsx"],"names":["React","Spinner","connect","PropTypes","uploadDataToStore","loadNumerator","WidBrands","props","brandHandler","e","paginatorEngine","target","getAttribute","brandsCheckboxGenerator","brandsLoading","brands","map","item","id","title","mapStateToProps","store","app","data","isLoading","mapDispatchToProps","dispatch","actions","key","string","propTypes","array","bool","func","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Spinner from '../../spinner';\nimport { connect } from 'react-redux';\nimport * as PropTypes from 'prop-types';\nimport { uploadDataToStore, loadNumerator } from '../../../store/action_creatores';\n\nfunction WidBrands(props) {\n\n    function brandHandler(e) { // обновляем каталог товаров на основании фильтров по брендам\n        props.paginatorEngine(\"0\"); // сбрасываем страницу на первую при изменении фильтра цветов\n        if (e.target.getAttribute(\"ident\") === \"ALL\") {\n            props.uploadDataToStore(\"catalog\");\n        } else {\n            props.uploadDataToStore(\"catalog\", `?brand=${e.target.getAttribute(\"ident\")}`);\n        };\n    };\n\n    function brandsCheckboxGenerator() { // генерируем чекбоксы на основе информации о брендах с сервера\n\n        if (props.brandsLoading) {\n            return (<Spinner />);\n        };\n\n        return props.brands.map((item) => {\n\n            return (\n                <div className=\"form-check\"\n                    key={item.id}\n                >\n                    <input\n                        onChange={brandHandler}\n                        className=\"form-check-input\"\n                        type=\"radio\"\n                        name=\"brandFilter\"\n                        ident={item.id}\n                        id={item.title}\n                        defaultChecked={false}\n                    />\n                    <label\n                        className=\"form-check-label\"\n                        htmlFor={item.title}>\n                        {item.title}\n                    </label>\n                </div>\n            )\n        })\n    };\n\n    return (\n        <div className=\"widget brands mb-50\">\n            <h6 className=\"widget-title mb-30\">Brands</h6>\n\n            <div className=\"widget-desc\">\n\n                {/* верхний чекбокс \"ALL\" по-умолчанию */}\n\n                <div className=\"form-check\">\n                    <input\n                        onChange={brandHandler}\n                        className=\"form-check-input\"\n                        type=\"radio\"\n                        name=\"brandFilter\"\n                        ident=\"ALL\"\n                        id=\"ALL\"\n                        defaultChecked={true}\n                    />\n                    <label\n                        className=\"form-check-label\"\n                        htmlFor=\"ALL\">\n                        ALL\n                    </label>\n                    <br />\n                </div>\n\n                {brandsCheckboxGenerator()}\n\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (store) => {\n    return {\n        brands: store.app.brands.data,\n        brandsLoading: store.app.isLoading.brands || false,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        uploadDataToStore: (actions, key) => dispatch(uploadDataToStore(actions, key)),\n        loadNumerator: (string) => dispatch(loadNumerator(string)),\n    };\n};\n\nWidBrands.propTypes = {\n    brands: PropTypes.array,\n    brandsLoading: PropTypes.bool,\n    uploadDataToStore: PropTypes.func,\n};\n\nexport default React.memo(connect(mapStateToProps, mapDispatchToProps)(WidBrands));"]},"metadata":{},"sourceType":"module"}